/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.flashcards;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.JButton;

/**
 *
 * @author uygun
 */
public class MatchTest extends javax.swing.JFrame {
    /**
     * Creates new form MatchTest
     */
    private int score;
    private int totalNumOfQuest;
    private String[][][] matchingWordsList;
    private ArrayList<String[]> wordsList; 
    private int frameNum;
    private JButton buttonSelected;
    private int numOfMatching;
    private int numOfMChoice;
    private int numOfWrite;
    private ArrayList<String[]> allWordsList;
    private Random rand = new Random();
    
    public MatchTest(ArrayList<String[]> wordsList, int totalNumOfQuest, int numOfMatching, int numOfMChoice, int numOfWrite) {
        this.score = 0;
        this.buttonSelected = null;
        this.wordsList = wordsList;
        //this.allWordsList = wordsList;
        this.allWordsList = new ArrayList<String[]>();
        allWordsList.addAll(wordsList);
        this.totalNumOfQuest = totalNumOfQuest;
        this.numOfMatching = numOfMatching;
        this.numOfMChoice = numOfMChoice;
        this.numOfWrite = numOfWrite;
        initComponents();
        if(numOfMatching != 0){
            getWordsForMatching();
            placeWords();
            continueButton.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        word1 = new javax.swing.JButton();
        word2 = new javax.swing.JButton();
        userAnswer1 = new javax.swing.JButton();
        word3 = new javax.swing.JButton();
        userAnswer2 = new javax.swing.JButton();
        userAnswer3 = new javax.swing.JButton();
        def1 = new javax.swing.JLabel();
        def2 = new javax.swing.JLabel();
        def3 = new javax.swing.JLabel();
        continueButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Test Mode");

        word1.setText("word one");
        word1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word1ActionPerformed(evt);
            }
        });

        word2.setText("word two");
        word2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word2ActionPerformed(evt);
            }
        });

        userAnswer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAnswer1ActionPerformed(evt);
            }
        });

        word3.setText("word three");
        word3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word3ActionPerformed(evt);
            }
        });

        userAnswer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAnswer2ActionPerformed(evt);
            }
        });

        userAnswer3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userAnswer3ActionPerformed(evt);
            }
        });

        def1.setLabelFor(userAnswer1);
        def1.setText("definition 1");

        def2.setLabelFor(userAnswer2);
        def2.setText("definition two");

        def3.setLabelFor(userAnswer3);
        def3.setText("definition three");

        continueButton.setText("Continue");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        checkButton.setText("Check");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(word1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(word2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(def1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(def2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(def3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(word3)
                        .addComponent(userAnswer2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addComponent(userAnswer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userAnswer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(continueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(word1)
                    .addComponent(word3)
                    .addComponent(word2))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(def1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(userAnswer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(def2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(userAnswer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userAnswer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(def3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(continueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void word3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word3ActionPerformed
        // TODO add your handling code here:
        if(word3.getBackground() != Color.DARK_GRAY){
            buttonSelected = word3;
            word3.setBackground(Color.ORANGE);
        }else{
            buttonSelected = null;
        }
        if(word1.getBackground() == Color.ORANGE){
            word1.setBackground(null);
        }
        if(word2.getBackground() == Color.ORANGE){
            word2.setBackground(null);
        }
    }//GEN-LAST:event_word3ActionPerformed

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        // TODO add your handling code here:
        frameNum --;
        if(frameNum >= 0){
            setAllButtonsEnabled(true);
            clearAllButtons();
            placeWords();
            continueButton.setEnabled(false);
        }else{
            this.dispose();
            if(numOfMChoice != 0){
                new MChoiceTest(wordsList, score, totalNumOfQuest, numOfMChoice, numOfWrite, allWordsList).setVisible(true);
            }else if(numOfWrite != 0){
                new WriteTest(wordsList, score, totalNumOfQuest, numOfWrite).setVisible(true);
            }else{
                new ScoreScreen(score, totalNumOfQuest).setVisible(true);
            }
        }
    }//GEN-LAST:event_continueButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        // TODO add your handling code here:
        String answer1 = matchingWordsList[frameNum][0][0]; 
        String answer2 = matchingWordsList[frameNum][1][0];
        String answer3 = matchingWordsList[frameNum][2][0];
        
        if(answer1.equals(userAnswer1.getText())){
            userAnswer1.setBackground(Color.GREEN);
            score++;
        }else{
            userAnswer1.setBackground(Color.RED);
        }
        if(answer2.equals(userAnswer2.getText())){
            userAnswer2.setBackground(Color.GREEN);
            score++;
        }else{
            userAnswer2.setBackground(Color.RED);
        }
        if(answer3.equals(userAnswer3.getText())){
            userAnswer3.setBackground(Color.GREEN);
            score++;
        }else{
            userAnswer3.setBackground(Color.RED);
        }
        setAllButtonsEnabled(false);
        continueButton.setEnabled(true);
    }//GEN-LAST:event_checkButtonActionPerformed

    private void word1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word1ActionPerformed
        // TODO add your handling code here:
        if(word1.getBackground() != Color.DARK_GRAY){
            buttonSelected = word1;
            word1.setBackground(Color.ORANGE);
        }else{
            buttonSelected = null;
        }
        if(word2.getBackground() == Color.ORANGE){
            word2.setBackground(null);
        }
        if(word3.getBackground() == Color.ORANGE){
            word3.setBackground(null);
        }
    }//GEN-LAST:event_word1ActionPerformed

    private void word2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word2ActionPerformed
    // TODO add your handling code here:    
        if(word2.getBackground() != Color.DARK_GRAY){
            buttonSelected = word2;
            word2.setBackground(Color.ORANGE);
        }else{
            buttonSelected = null;
        }
        if(word1.getBackground() == Color.ORANGE){
            word1.setBackground(null);
        }
        if(word3.getBackground() == Color.ORANGE){
            word3.setBackground(null);
        }

    }//GEN-LAST:event_word2ActionPerformed

    private void userAnswer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userAnswer1ActionPerformed
        // TODO add your handling code here:
        if(!userAnswer1.getText().equals("") && userAnswer1.getBackground() != Color.RED && userAnswer1.getBackground() != Color.GREEN){
            reactivateButton(userAnswer1.getText());
            if(buttonSelected == null){
                userAnswer1.setText(""); 
            }else{
                userAnswer1.setText(buttonSelected.getText());
                colourPlacedButton();
                buttonSelected = null;
            }
        }else if(buttonSelected != null && userAnswer1.getBackground() != Color.RED && userAnswer1.getBackground() != Color.GREEN){
            userAnswer1.setText(buttonSelected.getText());
            colourPlacedButton();
            buttonSelected = null;
        }
    }//GEN-LAST:event_userAnswer1ActionPerformed

    private void userAnswer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userAnswer2ActionPerformed
        // TODO add your handling code here:
        if(!userAnswer2.getText().equals("") && userAnswer2.getBackground() != Color.RED && userAnswer2.getBackground() != Color.GREEN){
            reactivateButton(userAnswer2.getText());
            if(buttonSelected == null){
                userAnswer2.setText(""); 
            }else{
                userAnswer2.setText(buttonSelected.getText());
                colourPlacedButton();
                buttonSelected = null;
            }
        }else if(buttonSelected != null && userAnswer2.getBackground() != Color.RED && userAnswer2.getBackground() != Color.GREEN){
            userAnswer2.setText(buttonSelected.getText());
            colourPlacedButton();
            buttonSelected = null;
        }
    }//GEN-LAST:event_userAnswer2ActionPerformed

    private void userAnswer3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userAnswer3ActionPerformed
        // TODO add your handling code here:
        if(!userAnswer3.getText().equals("") && userAnswer3.getBackground() != Color.RED && userAnswer3.getBackground() != Color.GREEN){
            reactivateButton(userAnswer3.getText());
            if(buttonSelected == null){
                userAnswer3.setText(""); 
            }else{
                userAnswer3.setText(buttonSelected.getText());
                colourPlacedButton();
                buttonSelected = null;
            }
        }else if(buttonSelected != null && userAnswer3.getBackground() != Color.RED && userAnswer3.getBackground() != Color.GREEN){
            userAnswer3.setText(buttonSelected.getText());
            colourPlacedButton();
            buttonSelected = null;
        }
    }//GEN-LAST:event_userAnswer3ActionPerformed

    private void placeWords(){
        def1.setText(matchingWordsList[frameNum][0][1]);
        def2.setText(matchingWordsList[frameNum][1][1]);
        def3.setText(matchingWordsList[frameNum][2][1]);
        
        ArrayList<String> words = new ArrayList<String>();
        for(int i=0; i<3; i++){
            words.add(matchingWordsList[frameNum][i][0]);
        }
        words = shuffleArrayList(words);
        word1.setText(words.get(0));
        word2.setText(words.get(1));
        word3.setText(words.get(2));
        //word1.setText(matchingWordsList[frameNum][0][0]);
        //word2.setText(matchingWordsList[frameNum][1][0]);
        //word3.setText(matchingWordsList[frameNum][2][0]);
    }
    
    private void colourPlacedButton(){
        buttonSelected.setBackground(Color.DARK_GRAY);
    }
    
    private void reactivateButton(String placedWord){
        if(word1.getText().equals(placedWord)){
            word1.setBackground(null);
        }else if(word2.getText().equals(placedWord)){
            word2.setBackground(null);
        }else{
            word3.setBackground(null);
        }
    }
    
    private void setAllButtonsEnabled(Boolean isEnabled){
        word1.setEnabled(isEnabled);
        word2.setEnabled(isEnabled);
        word3.setEnabled(isEnabled);
        checkButton.setEnabled(isEnabled);
    }
    
    private void clearAllButtons() {
        word1.setText("");
        word1.setBackground(null);
        word2.setText("");
        word2.setBackground(null);
        word3.setText("");
        word3.setBackground(null);
        userAnswer1.setText("");
        userAnswer1.setBackground(null);
        userAnswer2.setText("");
        userAnswer2.setBackground(null);
        userAnswer3.setText("");
        userAnswer3.setBackground(null);
        buttonSelected = null;
    }
    
    private void getWordsForMatching(){
        int numOfMatchingFrames = numOfMatching/3;
        String[][][] matchingWordsList = new String[numOfMatchingFrames][3][2];
        // For each frame
        for(int i=0; i<numOfMatchingFrames; i++){
            // Get 3 random words
            String[][] currentFrameWords = new String[3][2];
            for(int j=0; j<3; j++){    
                String[] word = getRandomWord();
                //matchingWordsList.add(i, word);
                currentFrameWords[j] = word;
            }
            matchingWordsList[i] = currentFrameWords;
        }
        this.matchingWordsList = matchingWordsList;
        this.frameNum = matchingWordsList.length-1;
    }
    
    private String[] getRandomWord(){
        int randNum = rand.nextInt(wordsList.size());
        String[] theWord = wordsList.get(randNum);
        wordsList.remove(randNum);
        return theWord;
    }  
   
    private ArrayList<String> shuffleArrayList(ArrayList<String> listToShuffle){
        for(int i=0; i<listToShuffle.size(); i++){
            String temp = listToShuffle.get(i);
            int randIndex = rand.nextInt(listToShuffle.size());
            listToShuffle.set(i, listToShuffle.get(randIndex));
            listToShuffle.set(randIndex, temp);
        }
        return listToShuffle;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
                //new MatchTest().setVisible(true);
        //    }
        //});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JLabel def1;
    private javax.swing.JLabel def2;
    private javax.swing.JLabel def3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JButton userAnswer1;
    private javax.swing.JButton userAnswer2;
    private javax.swing.JButton userAnswer3;
    private javax.swing.JButton word1;
    private javax.swing.JButton word2;
    private javax.swing.JButton word3;
    // End of variables declaration//GEN-END:variables

}
