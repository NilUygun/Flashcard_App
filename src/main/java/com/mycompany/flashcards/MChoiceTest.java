/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.flashcards;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 *
 * @author uygun
 */
public class MChoiceTest extends javax.swing.JFrame {

    /**
     * Creates new form MChoiceTest
     */
    
    private ArrayList<String[]> wordsList;
    private ArrayList<String[]> allWordsList;
    private int score;
    private int totalNumOfQuest;
    private int numOfMChoice;
    private int numOfWrite;
    private String[][] mChoiceWordsList;
    private int frameNum;
    private Random rand = new Random();
    
    public MChoiceTest(ArrayList<String[]> wordsList, int score, int totalNumOfQuest, int numOfMChoice, int numOfWrite, ArrayList<String[]> allWordsList) {
        this.wordsList = wordsList;
        this.allWordsList = allWordsList;
        this.score = score;
        this.totalNumOfQuest = totalNumOfQuest;
        this.numOfMChoice = numOfMChoice;
        this.numOfWrite = numOfWrite;
        initComponents();
        if(numOfMChoice != 0){
            getWordsForMChoice();
            placeQuestAndOptions();
            continueButton.setEnabled(false);
        }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        choiceButton1 = new javax.swing.JButton();
        questionButton = new javax.swing.JButton();
        choiceButton2 = new javax.swing.JButton();
        choiceButton4 = new javax.swing.JButton();
        choiceButton3 = new javax.swing.JButton();
        continueButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Test Mode");

        jLabel2.setText("Multiple Choice");

        choiceButton1.setText("jButton1");
        choiceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceButton1ActionPerformed(evt);
            }
        });

        questionButton.setText("jButton2");

        choiceButton2.setText("jButton3");
        choiceButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceButton2ActionPerformed(evt);
            }
        });

        choiceButton4.setText("jButton4");
        choiceButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceButton4ActionPerformed(evt);
            }
        });

        choiceButton3.setText("jButton5");
        choiceButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceButton3ActionPerformed(evt);
            }
        });

        continueButton.setText("Continue");
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(questionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(choiceButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                .addComponent(choiceButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(choiceButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(choiceButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(continueButton))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(34, 34, 34)
                .addComponent(questionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choiceButton2)
                    .addComponent(choiceButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choiceButton4)
                    .addComponent(choiceButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(continueButton)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choiceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceButton1ActionPerformed
        // TODO add your handling code here:
        JButton[] buttons = {choiceButton2, choiceButton3, choiceButton4};
        if(choiceButton1.getText().equals(mChoiceWordsList[frameNum][0]) && !isButtonColoured(choiceButton1)){
            choiceButton1.setBackground(Color.GREEN);
            score++;
            for(JButton button : buttons){
                button.setBackground(Color.LIGHT_GRAY);
            }
        }else if(!isButtonColoured(choiceButton1)){
            choiceButton1.setBackground(Color.RED);
            for(JButton button : buttons){
                if(button.getText().equals(mChoiceWordsList[frameNum][0])){
                    button.setBackground(Color.GREEN);
                }else{
                    button.setBackground(Color.LIGHT_GRAY);
                }
            }
        }
        continueButton.setEnabled(true);
    }//GEN-LAST:event_choiceButton1ActionPerformed

    private Boolean isButtonColoured(JButton button){
        Color buttonColour = button.getBackground();
        if(buttonColour == Color.RED || buttonColour == Color.GREEN || buttonColour == Color.LIGHT_GRAY){
            return true;
        }else{
            return false;
        }
    }
    
    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        // TODO add your handling code here:
        frameNum --;
        if(frameNum >= 0){
            clearAllButtons();
            placeQuestAndOptions();
            continueButton.setEnabled(false);
        }else{
            this.dispose();
            if(numOfWrite != 0){
                new WriteTest(wordsList, score, totalNumOfQuest, numOfWrite).setVisible(true);
            }else{
                new ScoreScreen(score, totalNumOfQuest).setVisible(true);
            }
        }        
    }//GEN-LAST:event_continueButtonActionPerformed

    private void choiceButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceButton2ActionPerformed
        // TODO add your handling code here:
        JButton[] buttons = {choiceButton1, choiceButton3, choiceButton4};
        if(choiceButton2.getText().equals(mChoiceWordsList[frameNum][0]) && !isButtonColoured(choiceButton2)){
            choiceButton2.setBackground(Color.GREEN);
            score++;
            for(JButton button : buttons){
                button.setBackground(Color.LIGHT_GRAY);
            }
        }else if(!isButtonColoured(choiceButton2)){
            choiceButton2.setBackground(Color.RED);
            for(JButton button : buttons){
                if(button.getText().equals(mChoiceWordsList[frameNum][0])){
                    button.setBackground(Color.GREEN);
                }else{
                    button.setBackground(Color.LIGHT_GRAY);
                }
            }
        }     
        continueButton.setEnabled(true);
    }//GEN-LAST:event_choiceButton2ActionPerformed

    private void choiceButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceButton3ActionPerformed
        // TODO add your handling code here:
        JButton[] buttons = {choiceButton1, choiceButton2, choiceButton4};
        if(choiceButton3.getText().equals(mChoiceWordsList[frameNum][0]) && !isButtonColoured(choiceButton3)){
            choiceButton3.setBackground(Color.GREEN);
            score++;
            for(JButton button : buttons){
                button.setBackground(Color.LIGHT_GRAY);
            }
        }else if(!isButtonColoured(choiceButton3)){
            choiceButton3.setBackground(Color.RED);
            for(JButton button : buttons){
                if(button.getText().equals(mChoiceWordsList[frameNum][0])){
                    button.setBackground(Color.GREEN);
                }else{
                    button.setBackground(Color.LIGHT_GRAY);
                }
            }
        }  
        continueButton.setEnabled(true);
    }//GEN-LAST:event_choiceButton3ActionPerformed

    private void choiceButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceButton4ActionPerformed
        // TODO add your handling code here:
        JButton[] buttons = {choiceButton1, choiceButton2, choiceButton3};
        if(choiceButton4.getText().equals(mChoiceWordsList[frameNum][0]) && !isButtonColoured(choiceButton4)){
            choiceButton4.setBackground(Color.GREEN);
            score++;
            for(JButton button : buttons){
                button.setBackground(Color.LIGHT_GRAY);
            }
        }else if(!isButtonColoured(choiceButton4)){
            choiceButton4.setBackground(Color.RED);
            for(JButton button : buttons){
                if(button.getText().equals(mChoiceWordsList[frameNum][0])){
                    button.setBackground(Color.GREEN);
                }else{
                    button.setBackground(Color.LIGHT_GRAY);
                }
            }
        }  
        continueButton.setEnabled(true);
    }//GEN-LAST:event_choiceButton4ActionPerformed

    private void getWordsForMChoice(){
        mChoiceWordsList = new String[numOfMChoice][2];
        for(int i=0; i<numOfMChoice; i++){
            String[] word = getRandomWord();
            mChoiceWordsList[i] = word;
        }
        this.mChoiceWordsList = mChoiceWordsList;
        this.frameNum = mChoiceWordsList.length-1;
    }    
        
    private String[] getRandomWord(){
        int randNum = rand.nextInt(wordsList.size());
        String[] theWord = wordsList.get(randNum);
        wordsList.remove(randNum);
        return theWord;
    }      
    
    private void placeQuestAndOptions(){
        ArrayList<String> theOptions = getOptionsList(mChoiceWordsList[frameNum][0]);
        questionButton.setText(mChoiceWordsList[frameNum][1]);
        choiceButton1.setText(theOptions.get(0));
        choiceButton2.setText(theOptions.get(1));
        choiceButton3.setText(theOptions.get(2));
        choiceButton4.setText(theOptions.get(3));       
    }
   
    private ArrayList<String> getOptionsList(String correctOption){
        int count = 0;
        ArrayList<String> randomOptions = new ArrayList<String>();
        // Get 3 random options
        while(count<3){
            int randWordNum = rand.nextInt(allWordsList.size());
            String[] theWord = allWordsList.get(randWordNum);
            String theOption = theWord[0];
            if(!theOption.equals(correctOption) && !doesArrayListContain(randomOptions, theOption)){
                randomOptions.add(theOption);
                count++;
            }
        }
        // Add the correct answer to the list
        randomOptions.add(correctOption);
        randomOptions = shuffleArrayList(randomOptions);
        return randomOptions;
    }
    
    private void clearAllButtons(){
        JButton[] buttons = {choiceButton1, choiceButton2, choiceButton3, choiceButton4};
        for(JButton button : buttons){
            button.setBackground(null);
        }
    }
    
    private Boolean doesArrayListContain(ArrayList<String> theList, String theWord){
        for(int i=0; i<theList.size(); i++){
            if(theList.get(i).equals(theWord)){
                return true;
            }
        }
        return false;
    }
    
    private ArrayList<String> shuffleArrayList(ArrayList<String> listToShuffle){
        for(int i=0; i<listToShuffle.size(); i++){
            String temp = listToShuffle.get(i);
            int randIndex = rand.nextInt(listToShuffle.size());
            listToShuffle.set(i, listToShuffle.get(randIndex));
            listToShuffle.set(randIndex, temp);
        }
        return listToShuffle;
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MChoiceTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MChoiceTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MChoiceTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MChoiceTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MChoiceTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choiceButton1;
    private javax.swing.JButton choiceButton2;
    private javax.swing.JButton choiceButton3;
    private javax.swing.JButton choiceButton4;
    private javax.swing.JButton continueButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton questionButton;
    // End of variables declaration//GEN-END:variables
}
